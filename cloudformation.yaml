AWSTemplateFormatVersion: '2010-09-09'
Description: 'Q Developer + Bedrock AI Code Intelligence System'

Parameters:
  GitHubToken:
    Type: String
    Description: GitHub Personal Access Token
    NoEcho: true

Resources:
  # IAM Role for Lambda
  QDeveloperLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: q-developer-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: QDeveloperPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 
                  - !Sub '${QDeveloperS3Bucket}/*'
                  - !GetAtt QDeveloperS3Bucket.Arn

  # S3 Bucket for storing analysis results
  QDeveloperS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'q-developer-analysis-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Lambda Function
  QDeveloperAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: q-developer-code-analyzer
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt QDeveloperLambdaRole.Arn
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          GITHUB_TOKEN: !Ref GitHubToken
          S3_BUCKET: !Ref QDeveloperS3Bucket
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder - deploy with actual code'}

  # API Gateway
  QDeveloperAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: q-developer-api
      Description: Q Developer Code Analysis API

  QDeveloperAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref QDeveloperAPI
      ParentId: !GetAtt QDeveloperAPI.RootResourceId
      PathPart: analyze

  QDeveloperAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QDeveloperAPI
      ResourceId: !Ref QDeveloperAPIResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QDeveloperAnalysisFunction.Arn}/invocations'

  QDeveloperAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: QDeveloperAPIMethod
    Properties:
      RestApiId: !Ref QDeveloperAPI
      StageName: prod

  # Lambda Permission for API Gateway
  QDeveloperLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref QDeveloperAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${QDeveloperAPI}/*/POST/analyze'

Outputs:
  APIEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${QDeveloperAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/analyze'
    Export:
      Name: QDeveloperAPIEndpoint

  LambdaFunctionArn:
    Description: Lambda function ARN
    Value: !GetAtt QDeveloperAnalysisFunction.Arn
    Export:
      Name: QDeveloperLambdaArn

  S3BucketName:
    Description: S3 bucket for analysis results
    Value: !Ref QDeveloperS3Bucket
    Export:
      Name: QDeveloperS3Bucket
